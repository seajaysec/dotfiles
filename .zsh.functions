# File System Operations
# ---------------------
cd() { builtin cd "$@"; ls; }

mcd() {
    mkdir -p "$1" && cd "$1";
}

alph_sort(){
    for f in *; do
        if [ -f "$f" ]; then
            mkdir -p "${f:0:1}"
            mv "$f" "${f:0:1}"
        fi
    done
}

lscsv() {
    ls -lT | awk '/^-/ && $1=$1' OFS=","
}

# Network & IP Operations
# ----------------------
localip(){
    ifconfig | grep 'inet ' | grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $2}' | tail -n 1
}

localips(){
    ifconfig | grep 'inet ' | grep -v '127.0.0.1' | cut -d: -f2 | awk '{ print $2}'
}

cidr2ip() {
    cdrr=$(nmap -sL -n "$1" 2>/dev/null | grepip | sort -Vu)
    echo $cdrr
    cdrc=$(echo $cdrr | wc -l)
    echo '\n' $cdrc 'IPs'
}

unroll() {
    pbpaste | tr ', ' '\n' | sed '/^[[:space:]]*$/d' > ./.tmp_ip_list.txt
    local sort_flag=${1:-"sort"}
    if [ "$sort_flag" = "sort" ]; then
        cdrr=$(nmap -sL -n -T5 --open -iL ./.tmp_ip_list.txt 2>/dev/null | grepip | sort -Vu)
    else
        cdrr=$(nmap -sL -n -T5 --open -iL ./.tmp_ip_list.txt 2>/dev/null | grepip)
    fi
    echo $cdrr
    echo $cdrr | pbcopy
    cdrc=$(echo $cdrr | wc -l)
    echo '\n' $cdrc 'IPs'
    rm ./.tmp_ip_list.txt
}

# Pattern Matching Functions
# ------------------------
grepeml() {
    rg -Nao --no-ignore -i "\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b" "$@" 2>/dev/null |
    command grep -Eoi "\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b"
}

grepip() {
    rg -Nao --no-ignore -e '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b' "$@" |
    command grep -Eo '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b'
}

grepip46() {
    rg -Nao --no-ignore -e '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b' \
                         -e '([0-9a-f]{1,4}:){3,7}[0-9a-f]{1,4}' "$@" |
    command grep -Eo '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b|([0-9a-f]{1,4}:){3,7}[0-9a-f]{1,4}'
}

grepipv6() {
    rg -Nao --no-ignore -i '([0-9a-fA-F]{1,4}:){3,7}[0-9a-fA-F]{1,4}' "$@" 2>/dev/null |
    command grep -Eoi '([0-9a-fA-F]{1,4}:){3,7}[0-9a-fA-F]{1,4}'
}

# Security & Certificate Functions
# ------------------------------
csrf(){
    curl -s -c $1 "$2" | awk -F 'value' '/user_token/ {print $2}' | cut -d "'" -f 2
}

sessionid(){
    grep PHPSESSID $1 | awk -F ' ' '{print $7}'
}

whodat(){ 
    openssl s_client -showcerts -connect $1:443 | grep 'CN=' 
}

whocerts(){
    echo "1. Running openssl check:" && echo \
    | openssl s_client -showcerts -servername $1 -connect $1:443 2>/dev/null \
    | openssl x509 -inform pem -noout -text \
    &&  echo "2. Running nslookup" \
    && nslookup -vc -type=ANY $1 \
    && echo "3. Running nmap" \
    && nmap -p 443 --script ssl-cert $1
}

# System Maintenance
# ----------------
bcbc(){
    if which pyenv >/dev/null 2>&1; then
        brew='env PATH=${PATH//$(pyenv root)\/shims:/} brew'
    fi
    brew tap --repair
    echo "${yellow}==>${reset} Running Brew Diagnostic..."
    brew doctor
    brew missing 2>&1
    echo -e "${green}==>${reset} Brew Diagnostic Finished."
}

pskill(){
    ps -ef | rg -i $1 | rg -v 'rg' | sed 's/  \+/ /g' | cut -d ' ' -f 2 | xargs kill -9
}

# Development Tools
# ---------------
ipy() {
    local PY_BIN
    local IPYTHON
    local PYV
    PY_BIN="$(python -c 'import sys; print(sys.executable)')"
    IPYTHON="$(dirname "$PY_BIN")/ipython"
    if [[ -x "$IPYTHON" ]]; then
        "$IPYTHON"
    else
        PYV="$(python -c 'import sys; print(".".join(str(i) for i in sys.version_info[:2]))')"
        echo "Looking for iPython for Python $PYV"
        PY_BIN="$($SHELL -i -c "python$PYV -c 'import sys; print(sys.executable)'")"
        "$(dirname "$PY_BIN")/ipython"
    fi
}

# Clipboard Operations
# ------------------

impaste(){
    tempfile=$(mktemp -t clipboard.XXXXXXXXXX.png)
    osascript -e 'set theImage to the clipboard as «class PNGf»' \
        -e "set theFile to open for access POSIX file \"$tempfile\" with write permission" \
        -e 'write theImage to theFile' \
        -e 'close access theFile'
    cat "$tempfile"
    rm "$tempfile"
}

# Media Conversion
# --------------
mp4togif() {
    ffmpeg -i $1.mp4 -r 10 -f image2pipe -vcodec ppm - | \
    convert -delay 5 -loop 0 - output.gif
}

# Git Operations
# ------------
gistx(){
    cd /opt/gists
    rm -rf .git
    git init
    git remote add origin `clipboard`
    git pull origin master
    echo '\nDONEZO\n'
    ls
}

subdirexec() {
    find . -maxdepth 1 -type d \( ! -name . \) \
    -exec bash -c "cd '{}' && pwd && $1 && echo 'success'" \;
}

subdirgitadd() {
    find . -maxdepth 1 -type d \( ! -name . \) \
    -exec bash -c "cd '{}' && pwd && git add -u && echo 'success'" \;
}
