# File System Operations
# ---------------------

# cd: Override default cd to list directory contents after changing directories
# Usage: cd /path/to/dir
cd() { builtin cd "$@"; ls; }

# mcd: Make directory and change into it
# Usage: mcd new_directory
mcd() {
    mkdir -p "$1" && cd "$1";
}

# alph_sort: Organize files into subdirectories based on their first letter
# Usage: cd messy_directory && alph_sort
alph_sort(){
    for f in *; do
        if [ -f "$f" ]; then
            mkdir -p "${f:0:1}"
            mv "$f" "${f:0:1}"
        fi
    done
}

# lscsv: List directory contents in CSV format
# Usage: lscsv > directory_contents.csv
lscsv() {
    ls -lT | awk '/^-/ && $1=$1' OFS=","
}

# Network & IP Operations
# ----------------------

# localip: Get local IP address(es) with labels
# Usage: localip      # returns all IPs with labels
localip() {
    local ips=($(ifconfig | grep 'inet ' | grep -v '127.0.0.1' | awk '{ print $2}'))
    local primary_ip=${ips[-1]}
    
    for ip in "${ips[@]}"; do
        if [ "$ip" = "$primary_ip" ]; then
            echo "Primary IP: $ip"
        else
            echo "Secondary IP: $ip"
        fi
    done
}

# iplist: Convert CIDR notation or comma-separated IPs/CIDRs to list of IPs
# Usage: iplist 192.168.1.0/24
# Usage: echo "192.168.1.1, 10.0.0.0/24" | pbcopy && iplist
# Usage: iplist nosort    # preserve original order
iplist() {
    local input="$1"
    local sort_flag="sort"
    
    # Check if input is a file or a direct argument
    if [ -z "$input" ]; then
        pbpaste | tr ', ' '\n' | sed '/^[[:space:]]*$/d' > ./.tmp_ip_list.txt
    else
        echo "$input" | tr ', ' '\n' | sed '/^[[:space:]]*$/d' > ./.tmp_ip_list.txt
        if [ "$input" = "nosort" ]; then
            sort_flag="nosort"
        fi
    fi

    if [ "$sort_flag" = "sort" ]; then
        cdrr=$(nmap -sL -n -T5 --open -iL ./.tmp_ip_list.txt 2>/dev/null | grepip | sort -Vu)
    else
        cdrr=$(nmap -sL -n -T5 --open -iL ./.tmp_ip_list.txt 2>/dev/null | grepip)
    fi

    echo "$cdrr"
    echo "$cdrr" | pbcopy
    cdrc=$(echo "$cdrr" | wc -l)
    echo '\n' "$cdrc" 'IPs'
    rm ./.tmp_ip_list.txt
}

# Pattern Matching Functions
# ------------------------

# grepeml: Extract email addresses from files or input
# Usage: cat file.txt | grepeml
# Usage: grepeml file1.txt file2.txt
grepeml() {
    rg -Nao --no-ignore -i "\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b" "$@" 2>/dev/null |
    command grep -Eoi "\b[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,}\b"
}

# grepip: Extract IP addresses with version selection
# Usage: cat file.txt | grepip 4     # IPv4 only
# Usage: grepip 6 file.txt           # IPv6 only
# Usage: grepip all file.txt         # Both IPv4 and IPv6
grepip() {
    local version=${1:-"4"}  # Default to IPv4
    shift 2>/dev/null  # Remove first argument if it exists
    
    case $version in
        "4")
            rg -Nao --no-ignore -e '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b' "$@" |
            command grep -Eo '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b'
            ;;
        "6")
            rg -Nao --no-ignore -i '([0-9a-fA-F]{1,4}:){3,7}[0-9a-fA-F]{1,4}' "$@" 2>/dev/null |
            command grep -Eoi '([0-9a-fA-F]{1,4}:){3,7}[0-9a-fA-F]{1,4}'
            ;;
        "all")
            rg -Nao --no-ignore -e '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b' \
                             -e '([0-9a-f]{1,4}:){3,7}[0-9a-f]{1,4}' "$@" |
            command grep -Eo '\b((([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\.)){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5]))\b|([0-9a-f]{1,4}:){3,7}[0-9a-f]{1,4}'
            ;;
    esac
}

# Security & Certificate Functions
# ------------------------------

# csrf: Extract CSRF token from cookie file
# Usage: csrf cookie.txt http://example.com/form
csrf(){
    curl -s -c $1 "$2" | awk -F 'value' '/user_token/ {print $2}' | cut -d "'" -f 2
}

# sessionid: Extract PHP session ID from file
# Usage: sessionid session_file.txt
sessionid(){
    grep PHPSESSID $1 | awk -F ' ' '{print $7}'
}

# whocerts: Check SSL certificate information
# Usage: whocerts example.com          # Brief check
# Usage: whocerts example.com full     # Detailed check
whocerts() {
    local domain=$1
    local detail=${2:-"brief"}  # Default to brief check
    
    if [ "$detail" = "brief" ]; then
        openssl s_client -showcerts -connect $domain:443 2>/dev/null | grep 'CN='
    else
        echo "1. Running openssl check:" && echo \
        | openssl s_client -showcerts -connect -servername $domain -connect $domain:443 2>/dev/null \
        | openssl x509 -inform pem -noout -text \
        && echo "2. Running nslookup" \
        && nslookup -vc -type=ANY $domain \
        && echo "3. Running nmap" \
        && nmap -p 443 --script ssl-cert $domain
    fi
}

# System Maintenance
# ----------------

# bcbc: Brew cleanup and diagnostic
# Usage: bcbc
bcbc(){
    if which pyenv >/dev/null 2>&1; then
        brew='env PATH=${PATH//$(pyenv root)\/shims:/} brew'
    fi
    brew tap --repair
    echo "${yellow}==>${reset} Running Brew Diagnostic..."
    brew doctor
    brew missing 2>&1
    echo -e "${green}==>${reset} Brew Diagnostic Finished."
}

# pskill: Kill processes matching pattern
# Usage: pskill firefox    # Kills all processes with 'firefox' in name
pskill(){
    ps -ef | rg -i $1 | rg -v 'rg' | sed 's/  \+/ /g' | cut -d ' ' -f 2 | xargs kill -9
}

# Development Tools
# ---------------

# ipy: Smart iPython launcher that respects virtual environments
# Usage: ipy
ipy() {
    local PY_BIN
    local IPYTHON
    local PYV
    PY_BIN="$(python -c 'import sys; print(sys.executable)')"
    IPYTHON="$(dirname "$PY_BIN")/ipython"
    if [[ -x "$IPYTHON" ]]; then
        "$IPYTHON"
    else
        PYV="$(python -c 'import sys; print(".".join(str(i) for i in sys.version_info[:2]))')"
        echo "Looking for iPython for Python $PYV"
        PY_BIN="$($SHELL -i -c "python$PYV -c 'import sys; print(sys.executable)'")"
        "$(dirname "$PY_BIN")/ipython"
    fi
}

# Clipboard Operations
# ------------------

# impaste: Save clipboard image to temporary file and output contents
# Usage: impaste > screenshot.png
impaste(){
    tempfile=$(mktemp -t clipboard.XXXXXXXXXX.png)
    osascript -e 'set theImage to the clipboard as «class PNGf»' \
        -e "set theFile to open for access POSIX file \"$tempfile\" with write permission" \
        -e 'write theImage to theFile' \
        -e 'close access theFile'
    cat "$tempfile"
    rm "$tempfile"
}

# Media Conversion
# --------------

# mp4togif: Convert MP4 video to GIF
# Usage: mp4togif input         # Creates output.gif
# Usage: mp4togif input custom  # Creates custom.gif
mp4togif() {
    if [ -z "$1" ]; then
        echo "Usage: mp4togif filename (without .mp4 extension)"
        return 1
    fi
    
    if [ ! -f "$1.mp4" ]; then
        echo "Error: $1.mp4 not found"
        return 1
    fi
    
    local output=${2:-"output.gif"}
    ffmpeg -i $1.mp4 -r 10 -f image2pipe -vcodec ppm - | \
    convert -delay 5 -loop 0 - "$output" && \
    echo "Converted $1.mp4 to $output"
}

# Git Operations
# ------------

# gistx: Clone gist from clipboard URL to /opt/gists
# Usage: <copy gist URL> && gistx
gistx(){
    cd /opt/gists
    rm -rf .git
    git init
    git remote add origin `clipboard`
    git pull origin master
    echo '\nDONEZO\n'
    ls
}

# subdir: Execute command in all subdirectories
# Usage: subdir exec "npm install"    # Run npm install in all subdirs
# Usage: subdir git "status"          # Run git status in all subdirs
subdir() {
    local action=$1
    shift
    case $action in
        "exec")
            find . -maxdepth 1 -type d \( ! -name . \) \
            -exec bash -c "cd '{}' && pwd && $* && echo 'success'" \;
            ;;
        "git")
            find . -maxdepth 1 -type d \( ! -name . \) \
            -exec bash -c "cd '{}' && pwd && git $* && echo 'success'" \;
            ;;
    esac
}

# Prerequisites & Setup
# -------------------
#
# To use these functions on macOS, install the following:
#
# 1. Command Line Tools:
#    xcode-select --install
#
# 2. Homebrew (https://brew.sh):
#    /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
#
# 3. Required Packages:
#    brew install \
#        ripgrep \        # Required for grep* functions
#        nmap \           # Required for iplist and cert checking
#        ffmpeg \         # Required for mp4togif
#        imagemagick \    # Required for mp4togif
#        openssl \        # Required for certificate functions
#        python \         # Required for ipy function
#        ipython         # Required for ipy function
#
# 4. Optional but recommended:
#    brew install \
#        pyenv \          # Better Python version management
#        xclip \          # Required for clipboard function on Linux
#        git             # Required for git operations
#
# 5. Python packages:
#    pip install \
#        ipython         # Alternative installation method
#
# Note: Some functions require specific permissions:
# - pskill requires sudo access for killing certain processes
# - gistx requires write access to /opt/gists directory
# - Some network scanning functions may require root privileges
#
# To set up /opt/gists directory:
#    sudo mkdir -p /opt/gists
#    sudo chown $USER:staff /opt/gists
#
# For VMware users (mountshares function):
#    Ensure VMware Tools is installed and up to date
#
# For Azure CLI functions:
#    brew install azure-cli
#    az login
#
# Environment Variables:
# - Set HOMEBREW_NO_AUTO_UPDATE=1 to speed up brew operations (optional)
# - Ensure PATH includes /usr/local/bin and /opt/homebrew/bin
